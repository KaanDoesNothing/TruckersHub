<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
        <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css" integrity="sha256-kLaT2GOSpHechhsozzB+flnD+zUyjE2LlfWPgU04xyI=" crossorigin="" />
        <script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js" integrity="sha256-WBkoXOwTeyKclOHuWtc+i2uENFpDZ9YPdf5Hf+D7ewM=" crossorigin=""></script>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.css">
        <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.js"></script>
    </head>
    <body>
        <div id="map" style="min-height: 100%; min-width: 100%; position: absolute;"></div>
        <script>
            (async () => {
                const params = new URLSearchParams(window.location.search);
                const vtcName = params.get("vtc_name");
                const userToTrack = params.get("user");

                if(!vtcName || !userToTrack) return;

                const vtcInfo = await (await fetch("/vtc", {method: "POST", body: JSON.stringify({name: vtcName})})).json();
                console.log(userToTrack, vtcInfo);

                let TileMapInfo = JSON.parse(`<%- JSON.stringify(TileMapInfo) %>`);
                TileMapInfo.tileSize = 256;

                function convertCoordinates(xx, yy) {
                    const MAX = Math.pow(2, 8) * TileMapInfo.tileSize;

                    const xTot = TileMapInfo.x2 - TileMapInfo.x1;
                    const yTot = TileMapInfo.y2 - TileMapInfo.y1;

                    const xRel = (xx - TileMapInfo.x1) / xTot;
                    const yRel = (yy - TileMapInfo.y1) / yTot;

                    return [
                        xRel * MAX,
                        yRel * MAX
                    ];
                }

                const amsterdam = convertCoordinates(-18562, -10630.2);
                
                const map = L.map("map", {canvas: true, drawControl: true, corssOrigin: true});

                const layer = new L.tileLayer('https:/cdn.kaanlikescoding.me/truckershub/map/Tiles/{z}/{x}/{y}.png', {
                    minZoom: TileMapInfo.minZoom,
                    maxZoom: TileMapInfo.maxZoom,
                    tileSize: TileMapInfo.tileSize,
                    center: [0, 0],
                }).addTo(map);

                let markers = [];

                async function handle() {
                    const oldMarkers = [...markers];
                    markers = [];

                    const user = await (await fetch("/api/getPlayerLocation", {method: "POST", body: JSON.stringify({username: userToTrack})})).json();

                    if(user.error) return;
                    
                    map.setView(map.unproject(convertCoordinates(user.data.x, user.data.z), 8), 8);

                    await Promise.all(vtcInfo.data.members.map(async member => {
                        const location = await (await fetch("/api/getPlayerLocation", {method: "POST", body: JSON.stringify({username: member.registeredName})})).json();
                        if(location.error) return;
                        const marker = L.circleMarker(map.unproject(convertCoordinates(location.data.x, location.data.z), 8), {radius: 3, fillOpacity: 1});

                        markers.push(marker);
                    }));

                    oldMarkers.forEach(marker => marker.remove());
                    markers.forEach(marker => marker.addTo(map));
                }

                setInterval(async () => {
                    await handle();
                }, 1000)
            })();
        </script>

        <style>
            .leaflet-interactive {
                color: white;
            }
        </style>
    </body>
</html>